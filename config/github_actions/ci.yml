name: TokenGovernor CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: 'true'
        type: boolean
      deploy_env:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  TOKEN_BUDGET: 100000
  PHASE: 'Phase 0'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy pytest

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import sorting check  
        run: isort --check-only --diff .

      - name: Run flake8 linting
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run mypy type checking
        run: mypy src/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    if: ${{ github.event.inputs.run_tests == 'true' || github.event.inputs.run_tests == '' }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Initialize test database
        run: |
          python -c "
          import sqlite3
          with open('config/database_schema.sql', 'r') as f:
              schema = f.read()
          conn = sqlite3.connect('test_workflow_data.db')
          conn.executescript(schema)
          conn.close()
          "

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src/tokengovernor \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml \
            -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Check for known security vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  token-budget-check:
    name: Token Budget Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ccusage
        run: pip install ccusage

      - name: Validate workflow plan token estimates
        run: |
          python -c "
          import json
          with open('workflow_plan.json', 'r') as f:
              plan = json.load(f)
          
          total_estimated = plan['total_phase_0_estimates']['total_allocated_tokens']
          budget = plan['resource_allocation']['total_token_budget']
          
          print(f'Phase 0 Allocation: {total_estimated} tokens')
          print(f'Total Budget: {budget} tokens')
          print(f'Remaining: {budget - total_estimated} tokens')
          
          if total_estimated > budget:
              print('‚ùå Token allocation exceeds budget!')
              exit(1)
          elif total_estimated > budget * 0.8:
              print('‚ö†Ô∏è  Token allocation is over 80% of budget')
          else:
              print('‚úÖ Token allocation is within budget')
          "

  build-and-validate:
    name: Build and Validate Package
    runs-on: ubuntu-latest
    needs: [test, security-scan, token-budget-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Validate package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.ref == 'refs/heads/dev' || (github.event.inputs.deploy_env == 'staging' && github.event_name == 'workflow_dispatch')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying TokenGovernor to staging environment"
          echo "üì¶ Package: $(ls dist/)"
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests in staging"
          # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.ref == 'refs/heads/main' || (github.event.inputs.deploy_env == 'production' && github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying TokenGovernor to production environment"
          echo "üì¶ Package: $(ls dist/)"
          # Add actual deployment commands here

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks"
          # Add health check commands here

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "‚úÖ TokenGovernor deployment completed successfully"
          # Add notification logic (Slack, email, etc.)

      - name: Notify on failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "‚ùå TokenGovernor deployment failed"
          # Add failure notification logic